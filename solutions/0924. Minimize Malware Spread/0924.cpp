class UF {
 public:
  UF(int n) : parent(n) {
    iota(begin(parent), end(parent), 0);
  }

  void union_(int u, int v) {
    parent[find(u)] = find(v);
  }

  int find(int u) {
    if (u != parent[u])
      parent[u] = find(parent[u]);
    return parent[u];
  }

 private:
  vector<int> parent;
};

class Solution {
 public:
  int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    const int n = graph.size();

    UF uf(n);
    vector<int> ufSize(n);
    vector<int> malwareCount(n);

    for (int i = 0; i < n; ++i)
      for (int j = i + 1; j < n; ++j)
        if (graph[i][j] == 1)
          uf.union_(i, j);

    for (int i = 0; i < n; ++i)
      ++ufSize[uf.find(i)];

    for (const int i : initial)
      ++malwareCount[uf.find(i)];

    sort(begin(initial), end(initial));

    int ans = initial[0];
    int maxUfSize = 0;

    // find the max union's malware if it only contains 1 malware
    for (const int i : initial) {
      const int parent = uf.find(i);
      if (ufSize[parent] > maxUfSize && malwareCount[parent] == 1) {
        maxUfSize = ufSize[parent];
        ans = i;
      }
    }

    return ans;
  }
};
